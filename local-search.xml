<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>現状</title>
    <link href="/2021/05/17/genjyou/"/>
    <url>/2021/05/17/genjyou/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="現状"><a href="#現状" class="headerlink" title="現状"></a>現状</h2><p>実行環境:Python 3.7</p><pre><code class="bash">pip install opencv-python</code></pre><pre><code class="bash">conda install --yes --file requirements.txt</code></pre><hr>]]></content>
    
    
    
    <tags>
      
      <tag>システム製作A</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>コンテスト</title>
    <link href="/2020/07/11/contest/"/>
    <url>/2020/07/11/contest/</url>
    
    <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><pre><code class="bash">import java.util.Scanner;public class Anonymous_1 {    public static void main(String[] args) {        Scanner in=new Scanner(System.in);        String s=in.next();        int sum=0;        int j=1;        for(int i=0;i&lt;s.length();i++)        {            if(s.charAt(i)!=&#39;-&#39;)            {                sum+=(s.charAt(i)-&#39;0&#39;);                j++;                if(j==10)                {                    break;                }            }        }        int mod=sum%11;        if(mod==10)        {            if(s.charAt(s.length()-1)==&#39;X&#39;)            {                System.out.println(&quot;Right&quot;);            }            else            {                System.out.println((s.substring(0, s.length()-1)+&#39;X&#39;));            }        }        else if(mod==s.charAt(s.length()-1)-&#39;0&#39;)        {            System.out.println(s+ &quot;&quot; + &quot;is correct&quot;);        }        else        {            System.out.println(s+ &quot;&quot; + &quot;is Wrong&quot;);        }    }}</code></pre><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><pre><code class="bash">public class Anonymous{    static double temp,temp1,c,t4,t3,t2,t1;/*開始座標（LineStart_x LineStart_y）終了座標（LineEnd_x LineEnd_y）右上座標（RectLeft_x RectTop_y）左下座標（RectRight_x, RectBottom_y）*///重なるか否かを判定する    public static boolean isLineIntersectRectangle(        double LineStart_x,        double LineStart_y,        double LineEnd_x,        double LineEnd_y,        double RectLeft_x,        double RectTop_y,        double RectRight_x,        double RectBottom_y) {        double lineHeight = LineStart_y - LineEnd_y;        double lineWidth = LineEnd_x - LineStart_x;          t1 = lineHeight * RectLeft_x + lineWidth * RectTop_y;        t2 = lineHeight * RectRight_x + lineWidth * RectBottom_y;        t3 = lineHeight * RectLeft_x + lineWidth * RectBottom_y;        t4 = lineHeight * RectRight_x + lineWidth * RectTop_y;        c = LineStart_x * LineEnd_y - LineEnd_x * LineStart_y;        if ((t1 + c &gt;= 0 &amp;&amp; t2 + c &lt;= 0)                || (t1 + c &lt;= 0 &amp;&amp; t2 + c &gt;= 0)                || (t3 + c &gt;= 0 &amp;&amp; t4 + c &lt;= 0)                || (t3 + c &lt;= 0 &amp;&amp; t4 + c &gt;= 0)) {            if (RectLeft_x &gt; RectRight_x) {                temp = RectLeft_x;                RectLeft_x = RectRight_x;                RectRight_x = temp;            }            if (RectTop_y &lt; RectBottom_y) {                temp1 = RectTop_y;                RectTop_y = RectBottom_y;                RectBottom_y = temp1;            }            if ((LineStart_x &lt; RectLeft_x &amp;&amp; LineEnd_x &lt; RectLeft_x)                    || (LineStart_x &gt; RectRight_x &amp;&amp; LineEnd_x &gt; RectRight_x)                    || (LineStart_y &gt; RectTop_y &amp;&amp; LineEnd_y &gt; RectTop_y)                    || (LineStart_y &lt; RectBottom_y &amp;&amp; LineEnd_y &lt; RectBottom_y)) {                return false;            } else {                return true;            }        } else {            return false;        }    }    //main関数    public static void main(String[] args) {        double LineStart_x;        double LineStart_y;        double LineEnd_x;        double LineEnd_y;        double RectLeft_x;        double RectTop_y;        double RectRight_x;        double RectBottom_y;        //入力        LineStart_x = Double.parseDouble(args[0]);        LineStart_y = Double.parseDouble(args[1]);        LineEnd_x = Double.parseDouble(args[2]);        LineEnd_y = Double.parseDouble(args[3]);        RectLeft_x = Double.parseDouble(args[4]);        RectTop_y = Double.parseDouble(args[5]);        RectRight_x = Double.parseDouble(args[6]);        RectBottom_y = Double.parseDouble(args[7]);        //falseならprint F,trueならprint T        if(isLineIntersectRectangle(            LineStart_x,            LineStart_y,            LineEnd_x,            LineEnd_y,            RectLeft_x,            RectTop_y,            RectRight_x,            RectBottom_y) == false){                System.out.println(&quot;F&quot;);            }        else{            System.out.println(&quot;T&quot;);        }    }}</code></pre><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><pre><code class="bash">public class Anonymous_3{//娭悢X*N両public static void fun(int n) {     double x,A;     x = Math.E/n;     A = 1;     for (int i=1;i&lt;=n;i++){         A =A * x * i;}System.out.println(&quot;n=&quot; + n + &quot; &quot;);System.out.println(&quot;Answer=&quot;+A);}public static void main (String[] args) {    fun(500);    fun(1000);}}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java report 1</title>
    <link href="/2020/06/27/java%20report%201/"/>
    <url>/2020/06/27/java%20report%201/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="5-17"><a href="#5-17" class="headerlink" title="5.17"></a>5.17</h2><p>フィボナッチ数列の各項を、第 1 項から第 20 項まで求めて出力するプログラムを作成せよ。</p><pre><code class="bash">public class fibonacchi{ public static void main(String[]args){  int f0 , f1 , fn ;  f0 = 1 ;  System.out.println(f0) ;  f1 = 1 ;  System.out.println(f1) ;  for (int i = 2 ; i &lt; 20 ; i++){   fn = f0 + f1 ;   System.out.println(fn) ;   f0 = f1 ;   f1 = fn ;  } }}</code></pre><p>PS C:\workspace&gt; java .\5-17.java<br>1<br>1<br>2<br>3<br>5<br>8<br>13<br>21<br>34<br>55<br>89<br>144<br>233<br>377<br>610<br>987<br>1597<br>2584<br>4181<br>6765</p><hr><h2 id="6-3"><a href="#6-3" class="headerlink" title="6.3"></a>6.3</h2><p>MethodSample2.java のような、static な isEven メソッドを利用するプログラムがある。isEven( )は整数が偶数であるかどうかをチェックするメソッドである。以下の実行結果になるように isEven( )メソッドの定義を追加せよ。</p><pre><code class="bash">class MethodSample2 {     static boolean isEven(int n){        if (n % 2 == 0)return true;        else return false;}  public static void main (String args[]){       int nums[ ] = {1,2,3,4,5,6,7,8,9,10};        for( int n : nums )               if ( isEven(n) ) System.out.println(n + &quot;は偶数です&quot; );           } }</code></pre><p>PS C:\workspace&gt; java .\6-3.java<br>2偼嬼悢偱偡<br>4偼嬼悢偱偡<br>6偼嬼悢偱偡<br>8偼嬼悢偱偡<br>10偼嬼悢偱偡</p><hr><h2 id="6-6"><a href="#6-6" class="headerlink" title="6.6"></a>6.6</h2><p>MaxSample.java は、static な maximum( )メソッドを利用するプログラムである。maximum( )は渡された 1 次元配列の要素の最大値を求め、それを返すメソッドである。MaxSample クラス内で main( )メソッドが記述されているが、maximum( )メソッドの定義は抜けている。maximum( )メソッドの定義を追加し、プログラムを完成せよ。</p><pre><code class="bash">public class MaxSample {    // ここに maximum( )メソッドの定義を追加    static int maximum(int x[]){        int max = x[1];        for( int n : x ) {            if (n &gt; max    ){                max = n;            }            }        return max;    }    public static void main(String args[ ]){    int a[ ] = { 10, 20, 50, 15, 5, 40, 35};    int b[ ] = { -10, -20, -50, -15, -5, -40, -35, -60};    System.out.println( maximum (a) );    System.out.println( maximum (b) );    }    }</code></pre><p>PS C:\workspace&gt; java .\6-6.java<br>50<br>-5</p><hr><h2 id="6-21"><a href="#6-21" class="headerlink" title="6.21"></a>6.21</h2><p>コマンドライン引数として利用者に任意の数の整数を入力させ、それらの和を出力するプログラムを作成せよ。（ テストデータ 1： 15 16 200 300テストデータ 2： 2 3 50 40 5 10）</p><pre><code class="bash">public class addition {    public static void main(String[] args) {    int[] arr = new int[args.length];    for (int i = 0; i &lt; args.length; i++) {    arr[i] = Integer.parseInt(args[i]);    }    Array cal = new Array();    cal.name = &quot;Result&quot;;    cal.add(arr);    cal.output();    }    }    public class Array{    String name;    private int sum = 0;    public void output(){    System.out.println(&quot; [ &quot; + name + &quot; ] &quot;);    System.out.println(&quot;sum : &quot; + sum);    }    public void add(int[] array){    for(int i = 0; i &lt; array.length; i++){    sum = sum + array[i];    }    }    }</code></pre><p>PS C:\workspace&gt; java .\6-21.java 15 16 200 300<br> [ Result ]<br>sum : 531<br>PS C:\workspace&gt; java .\6-21.java 2 3 50 40 5 10<br> [ Result ]<br>sum : 110</p><hr><h2 id="6-25"><a href="#6-25" class="headerlink" title="6.25"></a>6.25</h2><p>前課題を改良し、leftlimit, rightlimit および n を final として宣言し、leftlimit以上 rightlimit 以下の整数 n 個をランダムに発生させ、それらの平均値と標準偏差を求めよ。なお、leftlimit=50, rightlimit=100, n=10 とする。</p><pre><code class="bash">public class tekito {    public static void main(String[] args) {        final int n = 10;        int leftlimit,rightlimit;        int sum = 0;        leftlimit = 50;        rightlimit = 100;        int[] arr = new int[n];        for (int i = 0; i &lt; n; i++) {            arr[i] = (int) (Math.random() * (rightlimit-leftlimit) + leftlimit);        }        for (int i = 0; i &lt; n; i++) {            System.out.print(&quot; &quot; + arr[i]);            sum = sum + arr[i];        }        System.out.println();        System.out.print(sum / n);        System.out.println();        double sd = Math.sqrt(sum / n);                System.out.println(sd);    }}</code></pre><p>PS C:\workspace&gt; java .\6-25.java<br> 71 96 92 84 68 71 60 81 80 86<br>78<br>8.831760866327848<br>PS C:\workspace&gt; java .\6-25.java<br> 65 80 58 89 97 66 85 98 72 54<br>76<br>8.717797887081348<br>PS C:\workspace&gt; java .\6-25.java<br> 55 98 67 82 56 62 55 68 93 72<br>70<br>8.366600265340756</p><hr><h2 id="6-26"><a href="#6-26" class="headerlink" title="6.26"></a>6.26</h2><p>課題 6.9 の Block 型の配列（長さ 10）を宣言する。繰り返し文を使って、10 個の Block オブジェクトを作成し配列に入れる。オブジェクトのフィールドはsetBlock( )メソッドによって、1～10 乱数値で初期化する。その後、配列を検査し、同じ面積を持つブロックが（１つのペアでも）あれば true を表示し、なければ false を表示する。</p><pre><code class="bash">public class BlockSample {static class Block{int x, y; //長方形の幅と高さを格納するフィールドint area; //長方形の面積を格納するフィールド// &lt;--setBlock( )メソッドの定義を追加void setBlock() {  //コンストラクタ    this.x = (int) (Math.random()*(10-1)+1);    this.y = (int) (Math.random()*(10-1)+1);  }boolean sameBlock(Block obj) {if( (obj.x == x) &amp;&amp; (obj.y == y) )return true;else return false;//この文は次のように省略できる。// return (obj.x == x) &amp;&amp; (obj.y == y);} // &lt;--sameArea( )メソッドの定義を追加boolean sameArea (Block obj){    if(obj.x * obj.y == x * y)return true;else return false;}}public static void main(String args[ ]){ //Block obj1 = new Block( ); //obj1.setBlock(); int i,j; boolean aa=true; for (i=0;i&lt;10;i++){    Block obj[]=new Block[10];    obj[i]=new Block();    obj[i].setBlock();     for(j=0;j&lt;10;j++){        obj[j]=new Block();        obj[j].setBlock();        obj[j].setBlock();        aa = aa || obj[i].sameArea(obj[j]);     } } System.out.println(aa);}}</code></pre><p>PS C:\workspace&gt; java .\6-26.java<br>true<br>PS C:\workspace&gt; java .\6-26.java<br>true<br>PS C:\workspace&gt; java .\6-26.java<br>true</p><hr><h2 id="6-31"><a href="#6-31" class="headerlink" title="6.31"></a>6.31</h2><p>Student4Sample.java は、Student4 クラスを利用するプログラムである。以下の実行結果になるように Student4Sample クラスの定義を完成せよ。</p><pre><code class="bash">public class Student4Sample {static class Student4{    String name;    double gpa;    Student4 (String str, double x ) { //コンストラクタ    name = str;    gpa = x;    }    String getName( ){ return(name); }    double getGpa( ){ return(gpa); }    }    public static void main (String args[ ]){    // &lt;--追加分 //Student4[] student = new Student4[count];Student4 student1 = new Student4(&quot;中京 太郎&quot;, 3.7);Student4 student2 = new Student4(&quot;中京 次郎&quot;, 3.6);System.out.println(&quot;名前：&quot; + student1.getName( ) + &quot;,GPA=&quot; +student1.getGpa( ) );System.out.println(&quot;名前：&quot; + student2.getName( ) + &quot;,GPA=&quot; +student2.getGpa( ) );}}</code></pre><p>PS C:\workspace&gt; java .\6-31.java<br>柤慜丗拞嫗 懢榊,GPA=3.7<br>柤慜丗拞嫗 師榊,GPA=3.6</p><hr><h2 id="6-32"><a href="#6-32" class="headerlink" title="6.32"></a>6.32</h2><p>Student5Sample.java のような、Student5 クラスを利用するプログラムがある。以下の実行結果になるように Student5 クラスの定義を追加せよ。</p><pre><code class="bash">public class Student5Sample {    static class Student5{    String name;    int SchoolYear;    Student5 (String str, int x ) { //コンストラクタ    name = str;    SchoolYear = x;    }    String getName( ){ return(name); }    int getSchoolYear( ){ return(SchoolYear); }    }    public static void main (String args[ ]){    Student5 obj = new Student5 (&quot;森田 正弘&quot;, 3 );    System.out.println(&quot;名前：&quot; + obj.getName( ) + &quot;、学年：&quot; +     obj.getSchoolYear( ) );    }    }</code></pre><p>PS C:\workspace&gt; java .\6-32.java<br>柤慜丗怷揷 惓峅丄妛擭丗3</p><hr><blockquote><p>参考文献：George Lashkia 『Java の世界に突入-プロのプログラマになりたい学生のための Java 入門 』,Third Edition, 2014</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ビデオ通話のbackground変更</title>
    <link href="/2020/06/06/beijingenhuan/"/>
    <url>/2020/06/06/beijingenhuan/</url>
    
    <content type="html"><![CDATA[<h2 id="Python-Code"><a href="#Python-Code" class="headerlink" title="Python Code"></a>Python Code</h2><pre><code class="bash">from PIL import Imageimport numpy as npimport cv2cap = cv2.VideoCapture(0)cap.set(5,10)# 要替换的背景img_back=cv2.imread(&#39;./xxxx/xxxx.jpeg&#39;)while True:    ret,frame = cap.read()    if ret == False:        continue    #获取图片的尺寸    rows, cols, channels = frame.shape    lower_color = np.array([120, 120, 120])    upper_color = np.array([250, 250, 250])    # 创建掩图    fgmask = cv2.inRange(frame, lower_color, upper_color)    cv2.imshow(&#39;Mask&#39;, fgmask)    # 腐蚀膨胀    erode = cv2.erode(fgmask, None, iterations=1)    cv2.imshow(&#39;erode&#39;, erode)    dilate = cv2.dilate(erode, None, iterations=1)    cv2.imshow(&#39;dilate&#39;, dilate)    rows, cols = dilate.shape    img_back=img_back[0:rows,0:cols]    print(img_back)    # #根据掩图和原图进行抠图    img2_fg = cv2.bitwise_and(img_back, img_back, mask=dilate)    Mask_inv = cv2.bitwise_not(dilate)    img3_fg = cv2.bitwise_and(frame, frame, mask=Mask_inv)    finalImg=img2_fg+img3_fg    cv2.imshow(&#39;res&#39;, finalImg)    k = cv2.waitKey(10) &amp; 0xFF    if k == 27:        breakcap.release()cv2.destroyAllWindows()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/05/24/hello-world/"/>
    <url>/2020/05/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>　　“Hello World”的中文翻译很简单，即为“你好，世界”。Brian Kernighan 和Dennis M.Ritchie合著的《The C Programme Language》中第一次将其作为演示程序，后来的程序员在学习编程或进行设备调试时延续了这一习惯，从而广泛流行并沿用至今。<br>　　这里整理了使用不同语言打出“Hello World”的各种写法，看完突然有点明白编程的魅力了——虽然写法不同，但最终可以实现同一种效果</p><h2 id="各种Hello-World"><a href="#各种Hello-World" class="headerlink" title="各种Hello World"></a>各种Hello World</h2><h3 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h3><pre><code class="bash">Module MainFrm    Sub Main()        System.Console.WriteLine(&quot;Hello, World!&quot;)    End SubEnd Module</code></pre><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><pre><code class="bash">#include&lt;stdio.h&gt;int main(){    printf(&quot;Hello, World!&quot;);    return o;}</code></pre><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><pre><code class="bash">#include&lt;iostream&gt;using name space std;int main(){    cout&lt;&lt;&quot;Hello World!&quot;&lt;&lt;flush;    return 0;}</code></pre><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><pre><code class="bash">public class Hello{    public static void main(String[] args){        System.out.println(&quot;Hello, World!&quot;);    }}</code></pre><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><pre><code class="bash">print(&quot;Hello, World!&quot;)</code></pre><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><pre><code class="bash">package mainimport &quot;fmt&quot;func main() {    fmt.println(&quot;Hello, World!&quot;)} </code></pre><h3 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h3><pre><code class="bash">namespace HelloWorld{    class Program    {        static void Main(string[] args)        {            System.Console.Write(&quot;Hello, World!&quot;);        }    }} </code></pre><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><pre><code class="bash">echo &quot;Hello, World!&quot;; </code></pre><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><pre><code class="bash">console.log(&quot;Hello, World!&quot;)</code></pre><h3 id="Python-2"><a href="#Python-2" class="headerlink" title="Python 2"></a>Python 2</h3><pre><code class="bash">print &quot;Hello, World!&quot; </code></pre><h3 id="Python-3"><a href="#Python-3" class="headerlink" title="Python 3"></a>Python 3</h3><pre><code class="bash">print (&quot;Hello, World!&quot; )</code></pre><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><pre><code class="bash">def hello()      return &quot;Hello , World&quot; end   </code></pre><h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h3><pre><code class="bash">fun main(args: Array&lt;String&gt;) {    println(&quot;Hello, world!&quot;)} </code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
